FORMAT: 1A
HOST: http://wombat.ryu.titech.ac.jp/natsume-server

# Natsume Server API

natsume-serverはユーザ入力を解析し、一般的にJSONで返答する。

# Group Sources

Natsumeに含まれるすべてのコーパス（ジャンル）に関する情報、またはコーパス間の類似度を提供する。

## Sources summary [/api/sources]

Returns general summary information on the corpora and documents included in Natsume.

### Summary of corpus [GET]

+ Response 200 (application/json)

        "TODO"

## Genre [/api/sources/genre{?norm}]

### Summary of genre [GET] 
+ Parameters

    + norm = `sources` (optional, string, `sources`) ... The normalization level used for counts (one of `sources`, `paragraphs`, or `sentences`).

+ Response 200 (application/json)

        {
        "children" : [
            {
                "count" : 252,
                "name" : "韻文",
                "children" : [
                    {
                        "count" : 100,
                        "name" : "詩"
                    },
                    {
                        "count" : 60,
                        "name" : "短歌"
                    },
                    {
                        "count" : 92,
                        "name" : "俳句"
                    }
                ]
            },
            {
                ...
            },
            {
                "name" : "Wikipedia",
                "count" : 853975
            }
        ],
        "count" : 1027389,
        "name" : "Genres"
        }

### Similarity [/api/sources/genre/similarity]
## Similarity [GET] 

+ Response 200 (application/json)

        {}


# Group Tokens

Natsumeに含まれる単語（短単位、Natsume特有のユニット）の検索が行える。

## Token search [/api/tokens{?orthBase,lemma,pos1,pos2}]
+ Parameters

    + orthBase (optional, string, `おもう`) ... 形態素の表層型
    + lemma (optional, string, `思う`) ... 形態素の語彙素型
    + pos1 (optional, string, `動詞`) ... 形態素の品詞（MeCabの最初の品詞）
    + pos2 (optional, string, `一般`) ... 形態素の品詞（MeCabの2番目の品詞）
    
### [GET]

+ Response 200 (application/json)

        ```
        {}
        ```

# Group Collocations

Natsumeに含まれる共起表現（2―4グラム）の検索が行える。

## Collocations search [/api/collocations{?string_1,string_2,string_3,type,measure,offset,limit,relation-limit,compact-numbers,scale,debug}]

+ Parameters
    + string_1 (optional, string, `車`) ... 最初の語
    + string_2 (optional, string, `を`) ... 次の語
    + string_3 (optional, string, `運転する`) ... 最後の語
    + type = `noun-particle-verb` (optional, string, `noun-particle-verb`) ... noun-particle-verb
    + measure = `count` (optional, string, `count`) ...  count|dice|t-score|mi-score
    + offset = `0` (optional, int, `0`) ...  0
    + limit = `80` (optional, int, `80`) ...  80
    + relation-limit = `8` (optional, int, `8`) ...  8
    + compact-numbers = `true` (optional, boolean, `true|1`) ...  true
    + scale = `false` (optional, boolean, `false|0`) ...  false
    + debug = `false` (optional, boolean, `false|0`) ...  false

### [GET]
+ Request

        string_1=実験&type=noun_particle_verb&limit=3&relation_limit=3

+ Response 200 (application/json)

        ```
        [
           {
              "data" : [
                 {
                    "string3" : "行う",
                    "count" : 1266
                 },
                 {
                    "count" : 160,
                    "string3" : "行なう"
                 },
                 {
                    "count" : 90,
                    "string3" : "繰り返す"
                 }
              ],
              "string2" : "を"
           },
           {
              "data" : [
                 {
                    "string3" : "用いる",
                    "count" : 117
                 },
                 {
                    "count" : 113,
                    "string3" : "よる"
                 },
                 {
                    "string3" : "成功する",
                    "count" : 66
                 }
              ],
              "string2" : "に"
           },
           {
              "data" : [
                 {
                    "count" : 350,
                    "string3" : "行われる"
                 },
                 {
                    "count" : 28,
                    "string3" : "ある"
                 },
                 {
                    "count" : 25,
                    "string3" : "行なわれる"
                 }
              ],
              "string2" : "が"
           }
        ]
        ```

## Collocation tree [/api/collocations/tree{?string_1,string_2,string_3}]
+ Parameters

    + string_1 (optional, string, `車`) ... 最初の語
    
### [GET]

+ Response 200 (application/json)

    
        ```
        {}
        ```

# Group Error Identification

Returns positions of errors by error type and confidence.