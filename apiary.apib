FORMAT: 1A
HOST: http://wombat.ryu.titech.ac.jp/natsume-server

# natsume-server
natsume-serverはユーザ入力を解析し、一般的にJSONで返答する。

# Group Sources

Natsumeに含まれるすべてのコーパス（ジャンル）に関する情報、またはコーパス間の類似度を提供する。

## Sources summary [GET /api/sources]

Returns general information on the corpora and documents included in Natsume.

+ Request (application/json)

+ Response 200 (application/json)

### Genre [GET /api/sources/genre{?norm}]

+ Parameters

    + norm (optional, string, `sentences|paragraphs|sources`) ... The normalization level used for counts.

+ Model (application/json)

    + Body

        ```
        {
           "children" : [
              {
                 "count" : 252,
                 "name" : "韻文",
                 "children" : [
                    {
                       "count" : 100,
                       "name" : "詩"
                    },
                    {
                       "count" : 60,
                       "name" : "短歌"
                    },
                    {
                       "count" : 92,
                       "name" : "俳句"
                    }
                 ]
              },
              {
                ...
              },
              {
                 "name" : "Wikipedia",
                 "count" : 853975
              }
           ],
           "count" : 1027389,
           "name" : "Genres"
        }
        ```

+ Response 200

    [Genre][]


### Similarity [GET /api/sources/genre/similarity]


# Group Tokens

Natsumeに含まれる単語（短単位、Natsume特有のユニット）の検索が行える。

## Token search [GET /api/tokens{?orth}]

+ Parameters

    + orth (optional, string, `おもう`) ... 形態素の表層型

+ Model (application/json)

    + Body

        ```
        {}
        ```

# Group Collocations

Natsumeに含まれる共起表現（2―4グラム）の検索が行える。

## Collocations search [GET /api/collocations{?string_1,string_2,string_3}]

+ Request
    + Parameters
        + string_1 (optional, string, `車`) ... 最初の語
        + string_2 (optional, string, `を`) ... 次の語
        + string_3 (optional, string, `運転する`) ... 最後の語
        + type (optional, string, `noun-particle-verb`) ... noun-particle-verb
        + measure (optional, string, `count`) ...  count|dice|t-score|mi-score
        + offset (optional, int, `0`) ...  0
        + limit (optional, int, `80`) ...  80
        + relation-limit (optional, int, `8`) ...  8
        + compact-numbers (optional, boolean, `true|1`) ...  true
        + scale (optional, boolean, `false|0`) ...  false
        + debug (optional, boolean, `false|0`) ...  false

+ Model (application/json)
    `string_1=実験&type=noun_particle_verb&limit=3&relation_limit=3`
    + Body
    
        ```
        [
           {
              "data" : [
                 {
                    "string3" : "行う",
                    "count" : 1266
                 },
                 {
                    "count" : 160,
                    "string3" : "行なう"
                 },
                 {
                    "count" : 90,
                    "string3" : "繰り返す"
                 }
              ],
              "string2" : "を"
           },
           {
              "data" : [
                 {
                    "string3" : "用いる",
                    "count" : 117
                 },
                 {
                    "count" : 113,
                    "string3" : "よる"
                 },
                 {
                    "string3" : "成功する",
                    "count" : 66
                 }
              ],
              "string2" : "に"
           },
           {
              "data" : [
                 {
                    "count" : 350,
                    "string3" : "行われる"
                 },
                 {
                    "count" : 28,
                    "string3" : "ある"
                 },
                 {
                    "count" : 25,
                    "string3" : "行なわれる"
                 }
              ],
              "string2" : "が"
           }
        ]
        ```

+ Response 200

    [Genre][]

## Collocation tree [GET /api/collocations/tree{?string_1,string_2,string_3}]

+ Parameters

    + string_1 (optional, string, `車`) ... 最初の語

+ Model (application/json)

    + Body
    
        ```
        {}
        ```

# Group Error Identification

Returns positions of errors by error type and confidence.